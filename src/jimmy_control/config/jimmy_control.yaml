#----------------------------Controller #1----------------------------------
# This contorller is needed to publish all the joint states to the 
# /joint_states topic. This "controller" retrieves joint_state info through a 
# 'JointStateInterface'. The JointStateController, then takes this data and 
# converts it to a 'sensor_msgs/JointState' message and publishes it. See:
# https://answers.ros.org/question/321078/what-does-joint_state_controller-read/
jimmy_joint_state_controller:
  type: joint_state_controller/JointStateController
  publish_rate: 50

# This is the diff drive controller. The purpose of this controller is to 
# recieve geometry_msgs/Twist, and convert that to radians/sec (speed of
# rotation) for each wheel. I believe this is the only controller I need for
# the mobile base drive wheels, as the pid for the rate of change of the 
# wheel is handled by the ST10. Later the arduino will have to be able to 
# handle the PID. See: https://wiki.ros.org/diff_drive_controller 
jimmy_mobile_base_controller:   #naming from the wiki
  type        : "diff_drive_controller/DiffDriveController"
  left_wheel  : 'base_to_left_drive_wheel_joint'   #name of joint as in URDF
  right_wheel : 'base_to_right_drive_wheel_joint'  #name of joint as in URDF
  publish_rate: 50.0  # default: 50
  pose_covariance_diagonal : [0.001, 0.001, 1000000.0, 1000000.0, 1000000.0, 1000.0]
  twist_covariance_diagonal: [0.001, 0.001, 1000000.0, 1000000.0, 1000000.0, 1000.0]

  # Wheel separation and diameter. These are both optional.
  # diff_drive_controller will attempt to read either one or both from the
  # URDF if not specified as a parameter
  ##wheel_separation : 0.146 # meters...commented out
  ##wheel_radius : 0.0315    # meters...commentd out

  # Wheel separation and radius multipliers
  wheel_separation_multiplier: 1.0 # default: 1.0
  wheel_radius_multiplier    : 1.0 # default: 1.0

  # Velocity commands timeout [s], default 0.5
  cmd_vel_timeout: 0.5 #for manual control change to 10 seconds.

  # Base frame_id 
  base_frame_id: base_link 

  # Velocity and acceleration limits
  # Whenever a min_* is unspecified, default to -max_*
  linear:
    x:
      has_velocity_limits    : true
      max_velocity           : 1.0 # m/s
      min_velocity           : -1.0 # m/s
      has_acceleration_limits: true
      max_acceleration       : 0.8  # m/s^2
      min_acceleration       : -0.4 # m/s^2
      has_jerk_limits        : true
      max_jerk               : 5.0  # m/s^3
  angular:
    z:
      has_velocity_limits    : true
      max_velocity           : 1.4 # rad/s
      has_acceleration_limits: true
      max_acceleration       : 1.5  # rad/s^2
      has_jerk_limits        : true
      max_jerk               : 2.5  # rad/s^3

  #Publish to TF directly or not
  enable_odom_tf: true

  #Name of frame to publish odometry in
  odom_frame_id: odom

  # Publish the velocity command to be executed. 
  # It is to monitor the effect of limiters on the controller input.
  # publish_cmd: true
